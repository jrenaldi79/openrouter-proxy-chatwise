name: Test and Deploy

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Local tests that run in CI environment
  local-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run local tests (excludes production tests)
      run: npm test

    - name: Generate test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  # Deploy to staging environment first
  deploy-staging:
    needs: local-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    outputs:
      staging-url: ${{ steps.deploy.outputs.url }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Deploy to Staging
      id: deploy
      run: |
        gcloud run deploy openrouter-proxy-staging \
          --source . \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars OPENROUTER_BASE_URL=https://openrouter.ai,NODE_ENV=staging \
          --memory 256Mi \
          --timeout 300 \
          --min-instances 0 \
          --max-instances 2

        # Get the staging URL
        STAGING_URL=$(gcloud run services describe openrouter-proxy-staging --region=us-central1 --format='value(status.url)')
        echo "url=$STAGING_URL" >> $GITHUB_OUTPUT
        echo "🎯 Staging deployed to: $STAGING_URL"

  # Test against staging environment with real APIs
  staging-tests:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for staging deployment to be ready
      run: sleep 45

    - name: Run staging validation tests
      env:
        OPENROUTER_TEST_API_KEY: ${{ secrets.OPENROUTER_TEST_API_KEY }}
        SERVICE_URL: ${{ needs.deploy-staging.outputs.staging-url }}
      run: |
        echo "🧪 Running staging validation tests against: $SERVICE_URL"
        npm run test:production

    - name: Run comprehensive staging tests
      env:
        OPENROUTER_TEST_API_KEY: ${{ secrets.OPENROUTER_TEST_API_KEY }}
        SERVICE_URL: ${{ needs.deploy-staging.outputs.staging-url }}
      run: |
        echo "🔬 Running comprehensive Jest staging tests..."
        npm run test:production:jest

    - name: Staging test results
      run: |
        echo "✅ All staging tests passed! Ready for production deployment."

  # Deploy to production only after staging tests pass
  deploy-production:
    needs: [deploy-staging, staging-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    outputs:
      production-url: ${{ steps.deploy-prod.outputs.url }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Deploy to Production
      id: deploy-prod
      run: |
        gcloud run deploy openrouter-proxy \
          --source . \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars OPENROUTER_BASE_URL=https://openrouter.ai,NODE_ENV=production \
          --memory 512Mi \
          --timeout 300 \
          --min-instances 1 \
          --max-instances 10

        # Get the production URL
        PRODUCTION_URL=$(gcloud run services describe openrouter-proxy --region=us-central1 --format='value(status.url)')
        echo "url=$PRODUCTION_URL" >> $GITHUB_OUTPUT
        echo "🚀 Production deployed to: $PRODUCTION_URL"

  # Quick smoke tests in production
  production-smoke-tests:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for production deployment to be ready
      run: sleep 30

    - name: Production health check
      env:
        PRODUCTION_URL: ${{ needs.deploy-production.outputs.production-url }}
      run: |
        echo "🏥 Running production health check..."
        curl -f "$PRODUCTION_URL/health" || exit 1
        echo "✅ Production health check passed!"

    - name: Quick production validation
      env:
        OPENROUTER_TEST_API_KEY: ${{ secrets.OPENROUTER_TEST_API_KEY }}
        SERVICE_URL: ${{ needs.deploy-production.outputs.production-url }}
      run: |
        echo "⚡ Running quick production validation..."
        # Test just the health endpoint and one critical path
        node -e "
          const url = process.env.SERVICE_URL;
          const apiKey = process.env.OPENROUTER_TEST_API_KEY;

          fetch(url + '/health')
            .then(r => r.json())
            .then(d => console.log('Health:', d.status))
            .catch(e => { console.error('Health check failed:', e); process.exit(1); });
        "

    - name: Update production URL secret
      env:
        PRODUCTION_URL: ${{ needs.deploy-production.outputs.production-url }}
      run: |
        echo "📝 Production URL: $PRODUCTION_URL"
        # The URL will be used for future production tests

    - name: Deployment success
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "✅ Staging tests passed"
        echo "✅ Production deployed"
        echo "✅ Production smoke tests passed"
        echo "🚀 Service is ready for ChatWise integration!"